generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EtatPresence {
  PRESENT
  ABSENT
}

enum SexeUtilisateur {
  Male
  Female
}

model Token {
  id           Int      @id @default(autoincrement())
  accessToken  String   @unique
  refreshtoken String   @unique
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  compteId     Int      @unique
  compte       Compte   @relation(fields: [compteId], references: [id])
}

model CodeOTP {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  compteId  Int      @unique
  compte    Compte   @relation(fields: [compteId], references: [id])
}

model Compte {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  password  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      Utilisateur?
  codeOTP   CodeOTP?
  token     Token?
}

model Utilisateur {
  id            Int             @id @default(autoincrement())
  nom           String
  prenom        String
  image         String?
  dateNaissance DateTime
  bio           String?
  sexe          SexeUtilisateur
  compteId      Int             @unique
  compte        Compte          @relation(fields: [compteId], references: [id])
  etudiant      Etudiant?
  enseignant    Enseignant?
  admin         Administrateur?
}

model DatePresence {
  id        Int        @id @default(autoincrement())
  date      DateTime
  presences Presence[]
}

model Presence {
  id         Int          @id @default(autoincrement())
  etat       EtatPresence
  etudiantId Int
  etudiant   Etudiant     @relation(fields: [etudiantId], references: [id])
  dateId     Int
  date       DatePresence @relation(fields: [dateId], references: [id])
}

// i  can't use the relation  one to (one or Two) but i will use the one to many relation
// besause when cretae the logic for Binome i limit the number of etudient to <= 2
// so i will use the one to many relation here

model Etudiant {
  id                 Int                         @id @default(autoincrement())
  matricule          String                      @unique
  userId             Int                         @unique
  user               Utilisateur                 @relation(fields: [userId], references: [id])
  responsableEtape   EtudiantResponsableEtape?
  responsableMemoire EtudiantResponsableMemoire?
  binomeId           Int
  binome             Binome                      @relation(fields: [binomeId], references: [id])
  presences          Presence[]
  Question           Question[]

  Participation Participation[]
}

model Binome {
  id             Int        @id @default(autoincrement())
  responsabilite String
  etudiants      Etudiant[]
  groupeId       Int
  groupe         Groupe     @relation(fields: [groupeId], references: [id])
  rapport        Rapport[]
  note           Note[]
  cas            Cas[]
}

model Note {
  id       Int    @id @default(autoincrement())
  note     Float
  Binome   Binome @relation(fields: [binomeId], references: [id])
  binomeId Int
  etapeId  Int
  etape    Etape  @relation(fields: [etapeId], references: [id])
}

model Groupe {
  id           Int        @id @default(autoincrement())
  binomes      Binome[]
  enseignantId Int
  enseignant   Enseignant @relation(fields: [enseignantId], references: [id])
  reunions     Réunion[]
}

model EtudiantResponsableEtape {
  id         Int      @id @default(autoincrement())
  etudiantId Int      @unique
  etudiant   Etudiant @relation(fields: [etudiantId], references: [id])
}

model EtudiantResponsableMemoire {
  id         Int      @id @default(autoincrement())
  etudiantId Int      @unique
  etudiant   Etudiant @relation(fields: [etudiantId], references: [id])
}

model Enseignant {
  id          Int                    @id @default(autoincrement())
  userId      Int                    @unique
  user        Utilisateur            @relation(fields: [userId], references: [id])
  responsable EnseignantResponsable?
  principal   EnseignantPrincipal?
  sujets      Sujet[]
  groupes     Groupe[]
  Question    Question[]
  Réunion    Réunion[]
}

model EnseignantResponsable {
  id           Int        @id @default(autoincrement())
  enseignantId Int        @unique
  enseignant   Enseignant @relation(fields: [enseignantId], references: [id])
}

model EnseignantPrincipal {
  id           Int        @id @default(autoincrement())
  enseignantId Int        @unique
  enseignant   Enseignant @relation(fields: [enseignantId], references: [id])
}

model Administrateur {
  id       Int         @id @default(autoincrement())
  userId   Int         @unique
  user     Utilisateur @relation(fields: [userId], references: [id])
  annonces Annonce[]
}

model Annonce {
  id          Int            @id @default(autoincrement())
  titre       String
  description String
  image       String?
  date        DateTime       @default(now())
  adminId     Int
  admin       Administrateur @relation(fields: [adminId], references: [id])
}

model Sujet {
  id           Int               @id @default(autoincrement())
  titre        String
  description  String
  enseignantId Int
  enseignant   Enseignant        @relation(fields: [enseignantId], references: [id])
  reference    referencesSujet[]
  prerequis    prerequisSujet[]
  cas          Cas[]
  etapes       Etape[]
  rapport      Rapport?
}

model referencesSujet {
  id        Int    @id @default(autoincrement())
  reference String
  sujetId   Int
  sujet     Sujet  @relation(fields: [sujetId], references: [id])
}

model prerequisSujet {
  id        Int    @id @default(autoincrement())
  prerequis String
  sujetId   Int
  sujet     Sujet  @relation(fields: [sujetId], references: [id])
}

model Cas {
  id       Int    @id @default(autoincrement())
  titre    String
  détails String
  sujetId  Int
  sujet    Sujet  @relation(fields: [sujetId], references: [id])
  binomeId Int
  binome   Binome @relation(fields: [binomeId], references: [id])
}

model VersionRapport {
  id          Int      @id @default(autoincrement())
  description String
  lien        String
  rapportId   Int
  rapport     Rapport  @relation(fields: [rapportId], references: [id])
  updatedAt   DateTime @updatedAt
}

model EvaluationRaport {
  id          Int      @id @default(autoincrement())
  description String
  rapportId   Int
  rapport     Rapport  @relation(fields: [rapportId], references: [id])
  updatedAt   DateTime @updatedAt
}

model Rapport {
  id                Int                @id @default(autoincrement())
  titre             String
  rapportFinal      RapportFinal?
  rapportEtape      RapportEtape?
  rapportTâches    RapportTâches?
  versionRapport    VersionRapport[]
  evaluationRapport EvaluationRaport[]
  createdAt         DateTime           @default(now())
  sujetId           Int                @unique
  sujet             Sujet              @relation(fields: [sujetId], references: [id])
  binomeId          Int
  binome            Binome             @relation(fields: [binomeId], references: [id])
}

model RapportFinal {
  id        Int     @id @default(autoincrement())
  rapportId Int     @unique
  rapport   Rapport @relation(fields: [rapportId], references: [id])
}

model RapportEtape {
  id        Int     @id @default(autoincrement())
  rapportId Int     @unique
  rapport   Rapport @relation(fields: [rapportId], references: [id])
  etapes    Etape?
}

model Etape {
  id             Int          @id @default(autoincrement())
  dateDebut      DateTime
  dateFin        DateTime
  rapportEtapeId Int          @unique
  rapportEtape   RapportEtape @relation(fields: [rapportEtapeId], references: [id])
  sujetId        Int
  sujet          Sujet        @relation(fields: [sujetId], references: [id], onDelete: Cascade)
  note           Note[]
}

model RapportTâches {
  id        Int      @id @default(autoincrement())
  rapportId Int      @unique
  rapport   Rapport  @relation(fields: [rapportId], references: [id])
  tâches   Tâches?
}

model Tâches {
  id               Int            @id @default(autoincrement())
  description      String
  rapportTâchesId Int            @unique
  rapportTâches   RapportTâches @relation(fields: [rapportTâchesId], references: [id])
}

enum QuestionEtat {
  repondre
  attrandre
  bloquer
}

model Question {
  id           Int          @id @default(autoincrement())
  question     String
  reponse      String
  etat         QuestionEtat
  etudiantId   Int
  etudiant     Etudiant     @relation(fields: [etudiantId], references: [id])
  enseignantId Int
  enseignant   Enseignant   @relation(fields: [enseignantId], references: [id])
}

model Réunion {
  id            Int             @id @default(autoincrement())
  titre         String
  remarque      String
  lien          String
  dateDebut     DateTime
  dateFin       DateTime
  groupeId      Int
  groupe        Groupe          @relation(fields: [groupeId], references: [id])
  enseignantId  Int
  enseignant    Enseignant      @relation(fields: [enseignantId], references: [id])
  Participation Participation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Participation {
  id         Int          @id @default(autoincrement())
  etat       EtatPresence
  etudiantId Int
  etudiant   Etudiant     @relation(fields: [etudiantId], references: [id])
  reunionId  Int
  reunion    Réunion     @relation(fields: [reunionId], references: [id])
}
