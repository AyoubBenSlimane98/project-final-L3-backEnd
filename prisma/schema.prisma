generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum EtatRapport {
  Accepté
  Rejeté
}
enum EtatPresence {
  Present
  Absent
}
enum EtapeNom {
  Analyse
  Conception
  Developpement
}
enum TacheNom {
  DiagrammeCasUtilisation
  DescriptionTextuelle
  DescriptionGraphique
  DiagrammeClasseParticipative
  IHM
  DiagrammeClasse
  DiagrammeSequenceDetaille
  Developpement
}

enum SexeUtilisateur {
  Male
  Female
}

enum QuestionEtat {
  repondre
  attandre
  bloquer
}

enum Responsabilite {
  chapter_1
  chapter_2
  chapter_3
  introduction_resume_conclustion
}

model Token {
  id           Int      @id @default(autoincrement())
  accessToken  String   @unique
  refreshtoken String   @unique
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  compteId     Int      @unique
  compte       Compte   @relation(fields: [compteId], references: [idC])
}

model CodeOTP {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  compteId  Int      @unique
  compte    Compte   @relation(fields: [compteId], references: [idC])
}

model Compte {
  idC      Int          @id @default(autoincrement())
  email    String       @unique
  password String
  etat     Boolean      @default(false)
  user     Utilisateur?
  codeOTP  CodeOTP?
  token    Token?

}

model Utilisateur {
  idU           Int             @id @default(autoincrement())
  nom           String
  prenom        String
  image         String?
  dateNaissance DateTime
  bio           String?
  sexe          SexeUtilisateur
  idC           Int             @unique
  compte        Compte          @relation(fields: [idC], references: [idC], onDelete: Cascade)
  etudiant      Etudiant?
  enseignant    Enseignant?
  admin         Administrateur?
}

model Presence {
  etudiantId   Int
  etudiant     Etudiant     @relation(fields: [etudiantId], references: [idU])
  idDP         Int
  datePresence DatePresence @relation(fields: [idDP], references: [idDP])
  etat         EtatPresence

  @@id([etudiantId, idDP])
}

model DatePresence {
  idDP      Int        @id @default(autoincrement())
  date      DateTime
  presences Presence[]
}

model Etudiant {
  idU           Int             @id
  user          Utilisateur     @relation(fields: [idU], references: [idU], onDelete: Cascade)
  matricule     String          @unique
  noteFinal     Float?
  presences     Presence[]
  Question      Question[]
  Participation Participation[]
  idB           Int?
  binome        Binome?         @relation(fields: [idB], references: [idB], onDelete: SetNull)
}

model Binome {
  idB            Int             @id @default(autoincrement())
  responsabilite Responsabilite?
  idG            Int
  groupe         Groupe          @relation(fields: [idG], references: [idG], onDelete: Cascade)
  etudiant       Etudiant[]
  rapport        Rapport[]
  note           Note[]
  cas            Cas[]
  FeedBack       FeedBack[]
}

model Groupe {
  idG                   Int                    @id @default(autoincrement())
  nom                   String
  binomes               Binome[]
  idS                   Int?                   @unique
  sujet                 Sujet?                 @relation(fields: [idS], references: [idS])
  enseignantRId         Int?
  enseignantResponsable EnseignantResponsable? @relation(fields: [enseignantRId], references: [idU], onDelete: Cascade)
  reunions              Réunion[]
}

model Note {
  note    Float
  idEtape Int
  etape   Etape  @relation(fields: [idEtape], references: [idEtape], onDelete: Cascade)
  idB     Int
  binome  Binome @relation(fields: [idB], references: [idB], onDelete: Cascade)

  @@id([idEtape, idB])
}

model Enseignant {
  idU         Int                    @id
  user        Utilisateur            @relation(fields: [idU], references: [idU], onDelete: Cascade)
  responsable EnseignantResponsable?
  principal   EnseignantPrincipal?
}

model EnseignantResponsable {
  idU        Int        @id
  enseignant Enseignant @relation(fields: [idU], references: [idU], onDelete: Cascade)
  question   Question[]
  Groupe     Groupe[]
  Sujet      Sujet[]
  Réunion   Réunion[]
}

model EnseignantPrincipal {
  idU        Int        @id
  enseignant Enseignant @relation(fields: [idU], references: [idU], onDelete: Cascade)
}

model Administrateur {
  idU      Int         @id
  user     Utilisateur @relation(fields: [idU], references: [idU], onDelete: Cascade)
  annonces Annonce[]
}

model Annonce {
  idA         Int             @id @default(autoincrement())
  titre       String
  description String
  image       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  idU         Int?
  admin       Administrateur? @relation(fields: [idU], references: [idU], onDelete: Cascade)
}

model Sujet {
  idS                   Int                    @id @default(autoincrement())
  titre                 String
  description           String
  enseignantRId         Int?
  enseignantResponsable EnseignantResponsable? @relation(fields: [enseignantRId], references: [idU], onDelete: Cascade)
  reference             referencesSujet[]
  prerequis             prerequisSujet[]
  cas                   Cas[]
  etapes                Etape[]
  Groupe                Groupe?
}

model referencesSujet {
  idRef     Int    @id @default(autoincrement())
  reference String
  idS       Int
  sujet     Sujet  @relation(fields: [idS], references: [idS], onDelete: Cascade)
}

model prerequisSujet {
  idPre     Int    @id @default(autoincrement())
  prerequis String
  idS       Int
  sujet     Sujet  @relation(fields: [idS], references: [idS], onDelete: Cascade)
}

model Cas {
  idCas  Int     @id @default(autoincrement())
  acteur String
  cas    String
  statut Boolean @default(false)
  idS    Int
  sujet  Sujet   @relation(fields: [idS], references: [idS], onDelete: Cascade)
  idB    Int?
  binome Binome? @relation(fields: [idB], references: [idB], onDelete: Cascade)
}

model VersionRapport {
  idVR        Int      @id @default(autoincrement())
  description String
  lien        String
  idR         Int
  rapport     Rapport  @relation(fields: [idR], references: [idR], onDelete: Cascade)
  updatedAt   DateTime @updatedAt
}

model EvaluationRaport {
  idER        Int      @id @default(autoincrement())
  statut      EtatRapport  
  updatedAt   DateTime @updatedAt
  idR         Int
  rapport     Rapport  @relation(fields: [idR], references: [idR], onDelete: Cascade)
}

model Rapport {
  idR               Int                @id @default(autoincrement())
  titre             String
  rapportFinal      RapportFinal?
  rapportEtape      RapportEtape?
  rapportTâches    RapportTâches?
  versionRapport    VersionRapport[]
  evaluationRapport EvaluationRaport[]
  createdAt         DateTime           @default(now())
  idB               Int
  binome            Binome             @relation(fields: [idB], references: [idB], onDelete: Cascade)
  FeedBack          FeedBack[]
}

model RapportFinal {
  idR     Int     @id
  rapport Rapport @relation(fields: [idR], references: [idR])
}

model RapportEtape {
  idR     Int     @id
  rapport Rapport @relation(fields: [idR], references: [idR])
  etapes  Etape?
}

model RapportTâches {
  idR     Int      @id
  rapport Rapport  @relation(fields: [idR], references: [idR])
  tâches Tâches?
}

model Etape {
  idEtape        Int          @id @default(autoincrement())
  nom            EtapeNom
  dateDebut      DateTime
  dateFin        DateTime
  idR Int?          @unique
  rapportEtape   RapportEtape? @relation(fields: [idR], references: [idR])
  idS            Int
  sujet          Sujet        @relation(fields: [idS], references: [idS], onDelete: Cascade)
  note           Note[]
  Tâches Tâches[]
}

model Tâches {
  idTache        Int            @id @default(autoincrement())
  nom            String
  dateDebut      DateTime
  dateFin        DateTime
  idR            Int?            @unique
  rapportTâches RapportTâches? @relation(fields: [idR], references: [idR])
  idEtape        Int
  etape         Etape         @relation(fields: [idEtape], references: [idEtape])
}

model Question {
  idQ                   Int                   @id @default(autoincrement())
  question              String
  reponse               String?
  etat                  QuestionEtat          @default(attandre)
  etudiantId            Int
  etudiant              Etudiant              @relation(fields: [etudiantId], references: [idU], onDelete: Cascade)
  enseignantRId         Int
  enseignantResponsable EnseignantResponsable @relation(fields: [enseignantRId], references: [idU])
}

model Réunion {
  idRN                  Int                    @id @default(autoincrement())
  titre                 String
  remarque              String
  lien                  String
  dateDebut             DateTime
  idG                   Int
  groupe                Groupe                 @relation(fields: [idG], references: [idG])
  enseignantRId         Int
  enseignantResponsable EnseignantResponsable? @relation(fields: [enseignantRId], references: [idU], onDelete: Cascade)
  Participation         Participation[]
}

model Participation {
  etudiantId Int
  etudiant   Etudiant     @relation(fields: [etudiantId], references: [idU], onDelete: Cascade)
  idRN       Int
  reunion    Réunion     @relation(fields: [idRN], references: [idRN], onDelete: Cascade)
  etat       EtatPresence

  @@id([etudiantId, idRN])
}

model FeedBack {
  idF         Int     @id @default(autoincrement())
  description String
  idB         Int?
  binome      Binome?  @relation(fields: [idB], references: [idB])
  idR         Int?
  rapport     Rapport? @relation(fields: [idR], references: [idR])
}
